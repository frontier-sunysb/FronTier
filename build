#!/bin/bash

function parse_arguments {
 # Parse command-line arguments
    if [[ "$1" == "-h" ]]; then
        echo "$0    High-level build script for FronTier++."
        echo "Usage: $0 [-d] [-n] [-g] [--with-hdf]"
        echo
        echo "    -d          Enable debugging."
        echo "    -a          Advanced version"
        echo "    -b          Base version"
        echo "    -n          Just configure. Do not run make."
        echo "    --with-gpu  Enable compilation with GPU."
        exit
    fi
    
    WITHHYPRE=1
    WITHHDF=1
    WITHGD=1
    COPTS_GCC="-fopenmp -Wno-unused-result"
export BASECODE="no"

    for arg in $@ ; do
        if [[ "$arg" == "-d" ]]; then
	    OPTS="-g -rdynamic"
	    COPTS_GCC="-fopenmp -pedantic -Wno-long-long -Wno-unused-result"
	    COPTS_ICC="-Wall"
        elif [[ "$arg" == "-n" ]]; then
	    NOMAKE=1
        elif [[ "$arg" == "--enable-itaps" ]]; then
	    CONF="$CONF --enable-itaps"
        elif [[ "$arg" == "--enable-imesh" ]]; then
	    CONF="$CONF --enable-imesh"
        elif [[ "$arg" == "-a" ]]; then
	    export BASECODE="adv"
        elif [[ "$arg" == "-b" ]]; then
	    export BASECODE="base"
        elif [[ "$arg" == "--with-gpu" ]]; then
            WITHGPU=1
        elif [[ "$arg" == "-o2" ]]; then
	    OPTS="-fopenmp -O2"
        elif [[ "$arg" == "--without-hypre" ]]; then
            WITHHYPRE=0
        elif [[ "$arg" == "--without-hdf" ]]; then
            WITHHDF=0
        elif [[ "$arg" == "--without-gd" ]]; then
            WITHGD=0
        elif [[ "$arg" == "--with-gsl" ]]; then
            WITHGSL=1
	else
	    CONF="$CONF ${arg}"
        fi
    done
    if [[ "$OPTS" != "-g" ]]; then
        CONF="$CONF --with-no-debugging"
    fi
}

#################
function config_generic {
    # Generic platforms. 
    
    HASMPI=`which mpicxx`
    if [[ -n "$HASMPI" ]]; then
        # Assume MPICH2.
        export CXX="mpicxx ${OPTS}"
        export F77="mpif77 ${OPTS}"
        export CC="mpicc ${OPTS}"
    else
        # Assume gcc and gfortran.
        export CXX="g++ ${OPTS}"
        export F77="gfortran ${OPTS}"
        export CC="gcc ${OPTS}"
    fi

    echo -n "Enter command for C compiler. (Hit RETURN to use default \"$CC\"): "
    read CC_
    if  [[ -n "$CC_" ]]; then export CC=$CC_; fi

    echo -n "Enter command for C++ compiler. (Hit RETURN to use default \"$CXX\"): "
    read CXX_
    if  [[ -n "$CXX2" ]]; then export CXX=$CXX_; fi

    echo -n "Enter command for F77 compiler. (Hit RETURN to use default \"$F77)\": "
    read F77_
    if  [[ -n "$F77_" ]]; then export F77=$F77_; fi

    if [[ ${CC:0:2} == "mp" ]] && [[ ${CXX:0:2} == "mp" ]] && [[ ${F77:0:2} == "mp" ]]; then
        CONF="$CONF --with-mpich=${HASMPI/\/bin\/mpicxx/}"
    fi

    if [[ "${BASECODE}" == "base" ]]; then
        echo "Configure with basic fucntion"
   	CONF="${CONF} --with-base" 
    elif [[ "${BASECODE}" == "adv" ]]; then
        echo "Configure with advance fucntion"
   	CONF="${CONF} --with-adv" 
    fi

    if [[ -n "$WITHGPU" ]]; then
        CONF="$CONF --with-gpu"
        export USEGPU="yes"
    else
        export USEGPU="no"
    fi

    PMAKE="-j2"
}

#################
function config_base {
    # Simple platforms. 
    CONF="--with-base"
    HASMPI=`which mpicxx`
    if [[ -n "$HASMPI" ]]; then
        # Assume OpenMPI.
        export CXX="mpicxx ${OPTS}"
        export F77="mpif77 ${OPTS}"
        export CC="mpicc ${OPTS}"
    else
        # Assume gcc and gfortran.
        export CXX="g++ ${OPTS}"
        export F77="gfortran ${OPTS}"
        export CC="gcc ${OPTS}"
    fi

    if [[ -n "$WITHGPU" ]]; then
        CONF="$CONF --with-gpu"
        export USEGPU="yes"
    else
        export USEGPU="no"
    fi

    WITHHDF=0;
    WITHGD=0;

    PMAKE="-j2"
}

function config_adv {
    # advance platforms. 
    CONF="--with-adv"
export CXX="mpicxx ${OPTS} ${COPTS_GCC}"
    export F77="mpif77 ${OPTS}"
    export CC="mpicc ${OPTS} ${COPTS_GCC}"

    export scriptotherlibs="${scriptotherlibs} /usr/lib/libblas.so /usr/lib/x86_64-linux-gnu/libgfortran.so.3"

    if [[ -n "$WITHGPU" ]]; then
        CONF="$CONF --with-gpu"
        export USEGPU="yes"
    else
        export USEGPU="no"
    fi

    if [[ -n "$WITHGSL" ]]; then
        CONF="$CONF --with-gsl=/usr"
    fi

    export CONF="--with-mpich=/usr/local/pkg/mpich2 --with-petsc=${PETSC_DIR} -with-devel ${CONF} --with-gd=/usr"
    PMAKE="-j2"
}

#################
function config_vogon {
    export CXX="mpicxx ${OPTS} ${COPTS_GCC}"
    export F77="mpif77 ${OPTS}"
    export CC="mpicc ${OPTS} ${COPTS_GCC}"

    export PETSC_DIR=/usr/local/pkg/petsc-3.1-p7
    export PETSC_INCLUDE="-I${PETSC_DIR}/include"
    export PETSC_LIB="-L${PETSC_DIR}/lib -lpetsc -llapack -lblas -ldl -fopenmp -lm -L/usr/X11R6/lib -lX11"

    if [[ -n "$WITHHDF" ]]; then
        CONF="$CONF --with-hdf=/usr/local/pkg/HDF4"
    fi
    if [[ -n "$WITHHDF5" ]]; then
        CONF="$CONF --with-hdf5=/nfs/user01/duowang/hdf5-1.8.5"
        #CONF="$CONF --with-hdf5=/usr/local/pkg/HDF5"
    fi
    if [[ -n "$WITHGD" ]]; then
        CONF="$CONF --with-gd=/usr"
    fi
    if [[ -n "$WITHGSL" ]]; then
        CONF="$CONF --with-gsl=/usr"
    fi

    export CONF="--with-openmpi=/usr/local/pkg/openmpi --with-petsc=${PETSC_DIR} -with-devel ${CONF}"
    PMAKE="-j2"
}

#################
function config_sigma {
    export CXX="mpicxx ${OPTS} ${COPTS_GCC}"
    export F77="mpif77 ${OPTS}"
    export CC="mpicc ${OPTS} ${COPTS_GCC}"

    export scriptotherlibs="${scriptotherlibs} /usr/lib/libblas.so /usr/lib/x86_64-linux-gnu/libgfortran.so.3" 

    export PETSC_DIR=/usr/local/pkg/petsc
    export PETSC_INCLUDE="-I${PETSC_DIR}/include"
    export PETSC_LIB="-L${PETSC_DIR}/lib -lpetsc -lHYPRE -llapack -lblas -ldl -fopenmp -lm -L/usr/X11R6/lib -lX11"

    if [[ -n "$WITHHYPRE" ]]; then
        CONF="$CONF --with-hypre"
	export USEHYPRE="yes"
    else
	export USEHYPRE="no"
    fi

    if [[ -n "$WITHGPU" ]]; then
        CONF="$CONF --with-gpu"
	export USEGPU="yes"
    else
	export USEGPU="no"
    fi

    if [[ -n "$WITHHDF" ]]; then
        CONF="$CONF --with-hdf=/usr/local/pkg/hdf"
    fi

    if [[ -n "$WITHGSL" ]]; then
        CONF="$CONF --with-gsl=/usr"
    fi

    export CONF="--with-mpich=/usr/local/pkg/mpich2 --with-petsc=${PETSC_DIR} -with-devel ${CONF} --with-gd=/usr"
    PMAKE="-j2"
}

#################

#################
function config_gentooORNL {
    export CXX="mpicxx ${OPTS} ${COPTS_GCC}"
    export F77="mpif77 ${OPTS}"
    export CC="mpicc ${OPTS} ${COPTS_GCC}"

    export PETSC_DIR=/usr/local/petsc
    export PETSC_INCLUDE="-I${PETSC_DIR}/include"

    export PETSC_LIB="-L${PETSC_DIR}/lib -lpetsc -lflapack -lfblas -ldl -fopenmp -lm -L/usr/lib64 -lX11"

    if [[ -n "$WITHGSL" ]]; then
        CONF="$CONF --with-gsl=/usr/lib64"
    fi

    export CONF="--with-openmpi=/usr/local/ompi --with-petsc=${PETSC_DIR} --with-devel ${CONF}"
    PMAKE="-j2"
}

#################
function config_galaxy {
    export CXX="mpicxx ${OPTS} ${COPTS_GCC}"
    export F77="mpif77 ${OPTS}"
    export CC="mpicc ${OPTS} ${COPTS_GCC}"

#    export PETSC_DIR=/nfs/user02/ams530/shuwang/petsc-3.0.0-p12
    export PETSC_DIR=/nfs/admin/shiqiangqiang/petsc-3.0.0-p12
    export PETSC_ARCH=linux-gnu-c-debug
    export PETSC_INCLUDE="-I${PETSC_DIR}/include -I${PETSC_DIR}/${PETSC_ARCH}/include"
    export PETSC_LIB="-lblas -llapack -L${PETSC_DIR}/${PETSC_ARCH}/lib -lpetscksp -lpetscdm -lpetscmat -lpetscvec -lpetsc -ldl -fopenmp -lm -L/usr/X11R6/lib -lX11"
    
    if [[ -n "$WITHHDF" ]]; then
        CONF="$CONF --with-hdf=/usr/local/pkg/HDF4"
    fi
    if [[ -n "$WITHHDF5" ]]; then
        CONF="$CONF --with-hdf5=/nfs/user01/duowang/hdf5-1.8.5"
	#CONF="$CONF --with-hdf5=/usr/local/pkg/HDF5"
    fi

    export CONF="--with-openmpi=/usr/local/pkg/openmpi --with-petsc=${PETSC_DIR} --with-gd=/usr/local/pkg/gd --with-devel ${CONF}"
    PMAKE="-j2"
}

################# Main code starts here

parse_arguments $*

# Invoke machine specific config function
HOST=`uname -n`;
# Choose proper compilers based on machine
if [[ "${BASECODE}" == "base" ]] || [[ "${BASECODE}" == "adv" ]]; then
    echo "Base code, using generic configuration"
    config_generic
elif [[ "${HOST}" == "fenp" ]]; then
    echo "Computer is recognized as NYBlue/P."
    config_nybluep
elif [[ "${HOST}" == "fen" ]]; then
    echo "Computer is recognized as NYBlue/L."
    config_nybluel
elif [[ "${HOST}" == "dontpanic" ]]; then
    echo "Computer is recognized as Vogon."
    config_vogon
elif [[ "${HOST}" == "sirius" ]]; then
    echo "Computer is recognized as Galaxy."
    config_galaxy
elif [[ "${HOST}" == "alpha" ]]; then
    echo "Computer is recognized as alpha."
    config_alpha
elif [[ "${HOST}" == "omega" ]]; then
    echo "Computer is recognized as omega."
    config_omega
elif [[ "${HOST}" == "sigma" ]]; then
    echo "Computer is recognized as omega."
    config_sigma
elif [[ "${HOST}" == "lambda" ]]; then
    echo "Computer is recognized as omega."
    config_lambda
elif [[ "${HOST}" == "linli-pc" ]]; then
    echo "Computer is recognized as linli-pc."
    config_alpha
elif [[ "${HOST}" == "newdelta" ]]; then
    echo "Computer is recognized as Delta."
    config_delta
elif [[ "${HOST}" == "blade1" ]]; then
    echo "Computer is recognized as blade."
    config_blade
elif [[ "${HOST}" == "blade2" ]]; then
    echo "Computer is recognized as blade."
    config_blade
elif [[ "${HOST}" == "blade3" ]]; then
    echo "Computer is recognized as blade."
    config_blade
elif [[ "${HOST}" == "blade4" ]]; then
    echo "Computer is recognized as blade."
    config_blade
elif [[ "${HOST}" == "blade5" ]]; then
    echo "Computer is recognized as blade."
    config_blade
elif [[ "${HOST}" == "seawulf" ]]; then
    echo "Computer is recognized as Seawulf."
    config_seawulf
elif [[ "${HOST}" == "cu0login1" ]]; then
    echo "Computer is recognized as cu0login1."
    config_pnnl
elif [[ "${HOST}" == "jiao-pc3" ]]; then
    echo "Computer is recognized as Ubuntu."
    config_ubuntu
elif [[ "${HOST//[0-9]/}" == "honest.ncsa.uiuc.edu" ]]; then
    echo "Computer is recognized as NCSA Abe Linux cluster."
    config_abe
elif [[ "${HOST}" == "xmacbook" ]]; then
    echo "Computer is recognized as Gentoo Linux for ORNL Laptop."
    config_gentooORNL
elif [[ "${HOST}" == "flogin1" ]]; then
    echo "Computer is recognized as INL Fission."
    config_fission
elif [[ "${HOST}" == "ycshu-VirtualBox" ]]; then
    echo "Computer is recognized as blade."
    config_ycshu
elif [[ "${HOST}" == "cm" ]]; then
    echo "Computer is recognized as cm.faster."
    config_cm
else
    echo "Computer was not recognized. Using generic configure options."
    config_generic
fi

echo "Configuring FronTier with the following commands:"
echo "export CC=\"$CC\""
echo "export CXX=\"$CXX\""
echo "export F77=\"$F77\""
if [[ -n "$PETSC_DIR" ]]; then
    echo "export PETSC_DIR=\"$PETSC_DIR\""
    echo "export PETSC_ARCH=\"$PETSC_ARCH\""
    echo "export PETSC_INCLUDE=\"$PETSC_INCLUDE\""
    echo "export PETSC_LIB=\"$PETSC_LIB\""
fi
echo "autoconf"
echo "./configure $CONF"

# Run autoconf to generate ./configure
autoconf

# Run ./configure.
./configure $CONF

# Finally, invoke make
if [[ -z "$NOMAKE" ]]; then
    make ${PMAKE} clean
fi

if [[ -z "$NOMAKE" ]]; then
    make ${PMAKE}
fi
